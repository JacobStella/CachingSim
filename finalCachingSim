#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define CACHE_SIZE 32
#define BLOCK_SIZE 4
#define CACHE_LINES (CACHE_SIZE / BLOCK_SIZE)

typedef struct {
    int tag;
    int valid;
    int age;
} cacheLine;

typedef struct {
    cacheLine lines[CACHE_LINES];
} directMappedCache;

typedef struct {
    cacheLine lines[CACHE_LINES / 2][2];
} twoWayCache;

typedef struct {
    cacheLine lines[CACHE_LINES / 4][4];
} fourWayCache;

typedef struct {
    cacheLine lines[CACHE_LINES];
} fullyAssociativeCache;

int generateMemoryAccessPattern(int **pattern, const char *traces);
void simulate_directMappedCache(int *pattern, int length, int *hits, int *total_accesses);
void simulate_twoWayCache(int *pattern, int length, int *hits, int *total_accesses, int replacement);
void simulate_fourWayCache(int *pattern, int length, int *hits, int *total_accesses, int replacement);
void simulate_fullyAssociativeCache(int *pattern, int length, int *hits, int *total_accesses, int replacement);
int lru_replacement(int age[], int n);
int random_replacement(int n);

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <input_file>\n", argv[0]);
        return 1;
    }
    int *memory_access_pattern;

    const char *traces = "traces.txt";
    int pattern_length = generateMemoryAccessPattern(&memory_access_pattern, traces);

    int hits, total_accesses;
    float hit_rate;

    printf("Cache Simulation Results:\n");

    // Direct-mapped cache
    simulate_directMappedCache(memory_access_pattern, pattern_length, &hits, &total_accesses);
    hit_rate = (float)hits / total_accesses;
    printf("Direct Mapped Cache: %d hits, %d total accesses, hit rate: %.2f\n", hits, total_accesses, hit_rate);

    // 2-way set associative cache (LRU)
    simulate_twoWayCache(memory_access_pattern, pattern_length, &hits, &total_accesses, 0);
    hit_rate = (float)hits / total_accesses;
    printf("2-Way Set Associative Cache (LRU): %d hits, %d total accesses, hit rate: %.2f\n", hits, total_accesses, hit_rate);

    // 2-way set associative cache (Random)
    simulate_twoWayCache(memory_access_pattern, pattern_length, &hits, &total_accesses, 1);
    hit_rate = (float)hits / total_accesses;
    printf("2-Way Set Associative Cache (Random): %d hits, %d total accesses, hit rate: %.2f\n", hits, total_accesses, hit_rate);

    // 4-way set associative cache (LRU)
    simulate_fourWayCache(memory_access_pattern, pattern_length, &hits, &total_accesses, 0);
    hit_rate = (float)hits / total_accesses;
    printf("4-Way Set Associative Cache (LRU): %d hits, %d total accesses, hit rate: %.2f\n", hits, total_accesses, hit_rate);

    // 4-way set associative cache (Random)
    simulate_fourWayCache(memory_access_pattern, pattern_length, &hits, &total_accesses, 1);
    hit_rate = (float)hits / total_accesses;
    printf("4-Way Set Associative Cache (Random): %d hits, %d total accesses, hit rate: %.2f\n", hits, total_accesses, hit_rate);

    // Fully associative cache (LRU)
    simulate_fullyAssociativeCache(memory_access_pattern, pattern_length, &hits, &total_accesses, 0);
    hit_rate = (float)hits / total_accesses;
    printf("Fully Associative Cache (LRU): %d hits, %d total accesses, hit rate: %.2f\n", hits, total_accesses, hit_rate);

    // Fully associative cache (Random)
    simulate_fullyAssociativeCache(memory_access_pattern, pattern_length, &hits, &total_accesses, 1);
    hit_rate = (float)hits / total_accesses;
    printf("Fully Associative Cache (Random): %d hits, %d total accesses, hit rate: %.2f\n", hits, total_accesses, hit_rate);

    return 0;
}

int generateMemoryAccessPattern(int *pattern, const char *traces) {
    //open the file
    FILE *file = fopen(traces, "r");
    if (file == NULL) {
        printf("Error: Could not open the input file.\n");
        exit(1);
    }

    //set up pattern array & while loop
    int length = 0;
    int capacity = 10;
    *pattern = (int *)malloc(capacity * sizeof(int));

    //store file contents in pattern array
    while (!feof(file)) {
        if (length == capacity) {
            capacity *= 2;
            *pattern = (int *)realloc(*pattern, capacity * sizeof(int));
        }
        fscanf(file, "0x%x", *pattern + length);
        length++;
    }

    fclose(file);
    return length;
}


void simulate_directMappedCache(int *pattern, int length, int *hits, int *total_accesses) {
    directMappedCache cache;
    int index, tag;

    // Initialize the cache
    for (int i = 0; i < CACHE_LINES; i++) {
        cache.lines[i].valid = 0;
    }

    *hits = 0;
    *total_accesses = 0;

    for (int i = 0; i < length; i++) {
        int address = pattern[i];

        // Calculate index and tag
        index = (address / BLOCK_SIZE) % CACHE_LINES;
        tag = address / (BLOCK_SIZE * CACHE_LINES);

        // Cache hit
        if (cache.lines[index].valid && cache.lines[index].tag == tag) {
            (*hits)++;
        }
        // Cache miss
        else {
            cache.lines[index].tag = tag;
            cache.lines[index].valid = 1;
        }

        (*total_accesses)++;
    }
}

void simulate_twoWayCache(int *pattern, int length, int *hits, int *total_accesses, int replacement) {
    twoWayCache cache;
    int index, tag, way;

    // Initialize the cache
    for (int i = 0; i < CACHE_LINES / 2; i++) {
        for (int j = 0; j < 2; j++) {
            cache.lines[i][j].valid = 0;
            cache.lines[i][j].age = 0;
        }
    }

    *hits = 0;
    *total_accesses = 0;

    for (int i = 0; i < length; i++) {
        int address = pattern[i];

        // Calculate index and tag
        index = (address / BLOCK_SIZE) % (CACHE_LINES / 2);
        tag = address / (BLOCK_SIZE * (CACHE_LINES / 2));

        // Check for cache hit
        int hit = 0;
        for (way = 0; way < 2; way++) {
            if (cache.lines[index][way].valid && cache.lines[index][way].tag == tag) {
                hit = 1;
                (*hits)++;
                cache.lines[index][way].age = 0; // Reset age for LRU policy
                break;
            }
        }

        // Cache miss
        if (!hit) {
            // Determine replacement way
            if (replacement == 0) { // LRU
                way = lru_replacement(cache.lines[index], 2);
            } else { // Random
                way = random_replacement(2);
            }

            // Update cache line
            cache.lines[index][way].tag = tag;
            cache.lines[index][way].valid = 1;
            cache.lines[index][way].age = 0;
        } else {
            // Increment age for other way
            int other_way = 1 - way;
            if (cache.lines[index][other_way].valid) {
                cache.lines[index][other_way].age++;
            }
        }

        (*total_accesses)++;
    }
}

void simulate_fourWayCache(int *pattern, int length, int *hits, int *total_accesses, int replacement) {
    fourWayCache cache;
    int index, tag, way;

    // Initialize the cache
    for (int i = 0; i < CACHE_LINES / 4; i++) {
        for (int j = 0; j < 4; j++) {
            cache.lines[i][j].valid = 0;
            cache.lines[i][j].age = 0;
        }
    }

    *hits = 0;
    *total_accesses = 0;

    for (int i = 0; i < length; i++) {
        int address = pattern[i];

        // Calculate index and tag
        index = (address / BLOCK_SIZE) % (CACHE_LINES / 4);
        tag = address / (BLOCK_SIZE * (CACHE_LINES / 4));

        // Check for cache hit
        int hit = 0;
        for (way = 0; way < 4; way++) {
            if (cache.lines[index][way].valid && cache.lines[index][way].tag == tag) {
                hit = 1;
                (*hits)++;
                cache.lines[index][way].age = 0; // Reset age for LRU policy
                break;
            }
        }

        // Cache miss
        if (!hit) {
            // Determine replacement way
            if (replacement == 0) { // LRU
                way = lru_replacement(cache.lines[index], 4);
            } else { // Random
                way = random_replacement(4);
            }

            // Update cache line
            cache.lines[index][way].tag = tag;
            cache.lines[index][way].valid = 1;
            cache.lines[index][way].age = 0;
        } else {
            // Increment age for other ways
            for (int other_way = 0; other_way < 4; other_way++) {
                if (other_way != way && cache.lines[index][other_way].valid) {
                    cache.lines[index][other_way].age++;
                }
            }
        }

        (*total_accesses)++;
    }
}

void simulate_fullyAssociativeCache(int *pattern, int length, int *hits, int *total_accesses, int replacement) {
    fullyAssociativeCache cache;
    int tag, way;

    // Initialize the cache
    for (int i = 0; i < CACHE_LINES; i++) {
        cache.lines[i].valid = 0;
        cache.lines[i].age = 0;
    }

    *hits = 0;
    *total_accesses = 0;

    for (int i = 0; i < length; i++) {
        int address = pattern[i];

        // Calculate tag
        tag = address / BLOCK_SIZE;

        // Check for cache hit
        int hit = 0;
        for (way = 0; way < CACHE_LINES; way++) {
            if (cache.lines[way].valid && cache.lines[way].tag == tag) {
                hit = 1;
                (*hits)++;
                cache.lines[way].age = 0; // Reset age for LRU policy
                break;
            }
        }

        // Cache miss
        if (!hit) {
            // Determine replacement way
            if (replacement == 0) { // LRU
                way = lru_replacement(cache.lines, CACHE_LINES);
            } else { // Random
                way = random_replacement(CACHE_LINES);
            }

            // Update cache line
            cache.lines[way].tag = tag;
            cache.lines[way].valid = 1;
            cache.lines[way].age = 0;
        } else {
            // Increment age for other ways
            for (int other_way = 0; other_way < CACHE_LINES; other_way++) {
                if (other_way != way && cache.lines[other_way].valid) {
                    cache.lines[other_way].age++;
                }
            }
        }

        (*total_accesses)++;
    }
}

int lru_replacement(int age[], int n) {
    int oldest_age = age[0];
    int lru_way = 0;

    for (int i = 1; i < n; i++) {
        if (age[i] > oldest_age) {
            oldest_age = age[i];
            lru_way = i;
        }
    }

    return lru_way;
}

int random_replacement(int n) {
    srand(time(NULL));
    return rand() % n;
}
